package ru.itis.azat.ojs.model.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _ActionInfoContext was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ActionInfoContext extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final StringProperty<String> ACRONYM = PropertyFactory.createString("acronym", String.class);
    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final BaseProperty<Boolean> ENABLED = PropertyFactory.createBase("enabled", Boolean.class);
    public static final NumericProperty<Long> ID = PropertyFactory.createNumeric("id", Long.class);
    public static final StringProperty<String> LIBRARIAN_INFORMATION = PropertyFactory.createString("librarianInformation", String.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final NumericProperty<Long> OJS_ID = PropertyFactory.createNumeric("ojsId", Long.class);
    public static final StringProperty<String> URL_PATH = PropertyFactory.createString("urlPath", String.class);

    protected String acronym;
    protected String description;
    protected Boolean enabled;
    protected Long id;
    protected String librarianInformation;
    protected String name;
    protected Long ojsId;
    protected String urlPath;


    public void setAcronym(String acronym) {
        beforePropertyWrite("acronym", this.acronym, acronym);
        this.acronym = acronym;
    }

    public String getAcronym() {
        beforePropertyRead("acronym");
        return this.acronym;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setEnabled(Boolean enabled) {
        beforePropertyWrite("enabled", this.enabled, enabled);
        this.enabled = enabled;
    }

    public Boolean getEnabled() {
        beforePropertyRead("enabled");
        return this.enabled;
    }

    public void setId(Long id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Long getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setLibrarianInformation(String librarianInformation) {
        beforePropertyWrite("librarianInformation", this.librarianInformation, librarianInformation);
        this.librarianInformation = librarianInformation;
    }

    public String getLibrarianInformation() {
        beforePropertyRead("librarianInformation");
        return this.librarianInformation;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setOjsId(Long ojsId) {
        beforePropertyWrite("ojsId", this.ojsId, ojsId);
        this.ojsId = ojsId;
    }

    public Long getOjsId() {
        beforePropertyRead("ojsId");
        return this.ojsId;
    }

    public void setUrlPath(String urlPath) {
        beforePropertyWrite("urlPath", this.urlPath, urlPath);
        this.urlPath = urlPath;
    }

    public String getUrlPath() {
        beforePropertyRead("urlPath");
        return this.urlPath;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "acronym":
                return this.acronym;
            case "description":
                return this.description;
            case "enabled":
                return this.enabled;
            case "id":
                return this.id;
            case "librarianInformation":
                return this.librarianInformation;
            case "name":
                return this.name;
            case "ojsId":
                return this.ojsId;
            case "urlPath":
                return this.urlPath;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "acronym":
                this.acronym = (String)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "enabled":
                this.enabled = (Boolean)val;
                break;
            case "id":
                this.id = (Long)val;
                break;
            case "librarianInformation":
                this.librarianInformation = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "ojsId":
                this.ojsId = (Long)val;
                break;
            case "urlPath":
                this.urlPath = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.acronym);
        out.writeObject(this.description);
        out.writeObject(this.enabled);
        out.writeObject(this.id);
        out.writeObject(this.librarianInformation);
        out.writeObject(this.name);
        out.writeObject(this.ojsId);
        out.writeObject(this.urlPath);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.acronym = (String)in.readObject();
        this.description = (String)in.readObject();
        this.enabled = (Boolean)in.readObject();
        this.id = (Long)in.readObject();
        this.librarianInformation = (String)in.readObject();
        this.name = (String)in.readObject();
        this.ojsId = (Long)in.readObject();
        this.urlPath = (String)in.readObject();
    }

}
