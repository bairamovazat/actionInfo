package ru.itis.azat.ojs.model.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _ActionInfoUser was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ActionInfoUser extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final StringProperty<String> EMAIL = PropertyFactory.createString("email", String.class);
    public static final NumericProperty<Long> ID = PropertyFactory.createNumeric("id", Long.class);
    public static final NumericProperty<Long> OJS_ID = PropertyFactory.createNumeric("ojsId", Long.class);
    public static final StringProperty<String> ORCID = PropertyFactory.createString("orcid", String.class);
    public static final StringProperty<String> URL = PropertyFactory.createString("url", String.class);
    public static final StringProperty<String> USERNAME = PropertyFactory.createString("username", String.class);

    protected String email;
    protected Long id;
    protected Long ojsId;
    protected String orcid;
    protected String url;
    protected String username;


    public void setEmail(String email) {
        beforePropertyWrite("email", this.email, email);
        this.email = email;
    }

    public String getEmail() {
        beforePropertyRead("email");
        return this.email;
    }

    public void setId(Long id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Long getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setOjsId(Long ojsId) {
        beforePropertyWrite("ojsId", this.ojsId, ojsId);
        this.ojsId = ojsId;
    }

    public Long getOjsId() {
        beforePropertyRead("ojsId");
        return this.ojsId;
    }

    public void setOrcid(String orcid) {
        beforePropertyWrite("orcid", this.orcid, orcid);
        this.orcid = orcid;
    }

    public String getOrcid() {
        beforePropertyRead("orcid");
        return this.orcid;
    }

    public void setUrl(String url) {
        beforePropertyWrite("url", this.url, url);
        this.url = url;
    }

    public String getUrl() {
        beforePropertyRead("url");
        return this.url;
    }

    public void setUsername(String username) {
        beforePropertyWrite("username", this.username, username);
        this.username = username;
    }

    public String getUsername() {
        beforePropertyRead("username");
        return this.username;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "email":
                return this.email;
            case "id":
                return this.id;
            case "ojsId":
                return this.ojsId;
            case "orcid":
                return this.orcid;
            case "url":
                return this.url;
            case "username":
                return this.username;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "email":
                this.email = (String)val;
                break;
            case "id":
                this.id = (Long)val;
                break;
            case "ojsId":
                this.ojsId = (Long)val;
                break;
            case "orcid":
                this.orcid = (String)val;
                break;
            case "url":
                this.url = (String)val;
                break;
            case "username":
                this.username = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.email);
        out.writeObject(this.id);
        out.writeObject(this.ojsId);
        out.writeObject(this.orcid);
        out.writeObject(this.url);
        out.writeObject(this.username);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.email = (String)in.readObject();
        this.id = (Long)in.readObject();
        this.ojsId = (Long)in.readObject();
        this.orcid = (String)in.readObject();
        this.url = (String)in.readObject();
        this.username = (String)in.readObject();
    }

}
