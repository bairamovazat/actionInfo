package ru.itis.azat.ojs.model.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import ru.itis.azat.ojs.model.cayenne.ActionInfoContext;
import ru.itis.azat.ojs.model.cayenne.ActionInfoUser;

/**
 * Class _ActionInfo was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ActionInfo extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final StringProperty<String> ACTION = PropertyFactory.createString("action", String.class);
    public static final NumericProperty<Long> CONTEXT_ID = PropertyFactory.createNumeric("contextId", Long.class);
    public static final NumericProperty<Long> DATE = PropertyFactory.createNumeric("date", Long.class);
    public static final NumericProperty<Long> ID = PropertyFactory.createNumeric("id", Long.class);
    public static final NumericProperty<Long> OJS_ID = PropertyFactory.createNumeric("ojsId", Long.class);
    public static final StringProperty<String> PARAMS = PropertyFactory.createString("params", String.class);
    public static final StringProperty<String> PAYLOAD = PropertyFactory.createString("payload", String.class);
    public static final StringProperty<String> TYPE = PropertyFactory.createString("type", String.class);
    public static final NumericProperty<Long> USER_ID = PropertyFactory.createNumeric("userId", Long.class);
    public static final EntityProperty<ActionInfoContext> CONTEXT = PropertyFactory.createEntity("context", ActionInfoContext.class);
    public static final EntityProperty<ActionInfoUser> USER = PropertyFactory.createEntity("user", ActionInfoUser.class);

    protected String action;
    protected Long contextId;
    protected Long date;
    protected Long id;
    protected Long ojsId;
    protected String params;
    protected String payload;
    protected String type;
    protected Long userId;

    protected Object context;
    protected Object user;

    public void setAction(String action) {
        beforePropertyWrite("action", this.action, action);
        this.action = action;
    }

    public String getAction() {
        beforePropertyRead("action");
        return this.action;
    }

    public void setContextId(Long contextId) {
        beforePropertyWrite("contextId", this.contextId, contextId);
        this.contextId = contextId;
    }

    public Long getContextId() {
        beforePropertyRead("contextId");
        return this.contextId;
    }

    public void setDate(Long date) {
        beforePropertyWrite("date", this.date, date);
        this.date = date;
    }

    public Long getDate() {
        beforePropertyRead("date");
        return this.date;
    }

    public void setId(Long id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Long getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setOjsId(Long ojsId) {
        beforePropertyWrite("ojsId", this.ojsId, ojsId);
        this.ojsId = ojsId;
    }

    public Long getOjsId() {
        beforePropertyRead("ojsId");
        return this.ojsId;
    }

    public void setParams(String params) {
        beforePropertyWrite("params", this.params, params);
        this.params = params;
    }

    public String getParams() {
        beforePropertyRead("params");
        return this.params;
    }

    public void setPayload(String payload) {
        beforePropertyWrite("payload", this.payload, payload);
        this.payload = payload;
    }

    public String getPayload() {
        beforePropertyRead("payload");
        return this.payload;
    }

    public void setType(String type) {
        beforePropertyWrite("type", this.type, type);
        this.type = type;
    }

    public String getType() {
        beforePropertyRead("type");
        return this.type;
    }

    public void setUserId(Long userId) {
        beforePropertyWrite("userId", this.userId, userId);
        this.userId = userId;
    }

    public Long getUserId() {
        beforePropertyRead("userId");
        return this.userId;
    }

    public void setContext(ActionInfoContext context) {
        setToOneTarget("context", context, true);
    }

    public ActionInfoContext getContext() {
        return (ActionInfoContext)readProperty("context");
    }

    public void setUser(ActionInfoUser user) {
        setToOneTarget("user", user, true);
    }

    public ActionInfoUser getUser() {
        return (ActionInfoUser)readProperty("user");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "action":
                return this.action;
            case "contextId":
                return this.contextId;
            case "date":
                return this.date;
            case "id":
                return this.id;
            case "ojsId":
                return this.ojsId;
            case "params":
                return this.params;
            case "payload":
                return this.payload;
            case "type":
                return this.type;
            case "userId":
                return this.userId;
            case "context":
                return this.context;
            case "user":
                return this.user;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "action":
                this.action = (String)val;
                break;
            case "contextId":
                this.contextId = (Long)val;
                break;
            case "date":
                this.date = (Long)val;
                break;
            case "id":
                this.id = (Long)val;
                break;
            case "ojsId":
                this.ojsId = (Long)val;
                break;
            case "params":
                this.params = (String)val;
                break;
            case "payload":
                this.payload = (String)val;
                break;
            case "type":
                this.type = (String)val;
                break;
            case "userId":
                this.userId = (Long)val;
                break;
            case "context":
                this.context = val;
                break;
            case "user":
                this.user = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.action);
        out.writeObject(this.contextId);
        out.writeObject(this.date);
        out.writeObject(this.id);
        out.writeObject(this.ojsId);
        out.writeObject(this.params);
        out.writeObject(this.payload);
        out.writeObject(this.type);
        out.writeObject(this.userId);
        out.writeObject(this.context);
        out.writeObject(this.user);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.action = (String)in.readObject();
        this.contextId = (Long)in.readObject();
        this.date = (Long)in.readObject();
        this.id = (Long)in.readObject();
        this.ojsId = (Long)in.readObject();
        this.params = (String)in.readObject();
        this.payload = (String)in.readObject();
        this.type = (String)in.readObject();
        this.userId = (Long)in.readObject();
        this.context = in.readObject();
        this.user = in.readObject();
    }

}
